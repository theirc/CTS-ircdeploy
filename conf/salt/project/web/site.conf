server {
    listen 443;
    server_name {{ pillar['domain'] }};
    root {{ public_root }};

    keepalive_timeout 5;
    proxy_read_timeout 180s;

    access_log {{ log_dir }}/nginx.access.log;
    error_log {{ log_dir }}/nginx.error.log;

    ssl on;
    ssl_protocols  TLSv1 TLSv1.1 TLSv1.2;
    ssl_session_cache   shared:SSL:10m;
    ssl_session_timeout  10m;
    ssl_certificate {{ ssl_dir }}/{{ pillar['domain'] }}.crt;
    ssl_certificate_key {{ ssl_dir }}/{{ pillar['domain'] }}.key;
    ssl_prefer_server_ciphers   on;
    add_header Strict-Transport-Security max-age=31536000;

    if ($host !~* ^({{ pillar['domain'] }}|www.{{ pillar['domain'] }})$) {
        # Deny non-matching Host headers
        return 444;
    }

    location /robots.txt {
        alias {{ public_root }}/static/robots.txt;
    }

    location /media {
        alias {{ public_root }}/media;
    }

    location /static {
        gzip on;
        alias {{ public_root }}/static;
        expires max;
        add_header Cache-Control public;

        location /static/protected {
            return 401;
        }
    }

    # See https://github.com/johnsensible/django-sendfile and http://wiki.nginx.org/XSendfile
    location /protected/ {
        internal;
        # Note: the location path ("/protected/") is concatenated onto the root, so don't repeat it:
        root {{ public_root }}/static/;
    }

    error_page 502 503 504 /502.html;

    location /502.html {
        alias {{ public_root }}/static/502.html;
    }

  {% for instance in salt['pillar.get']('instances') %}
    {% set port = salt['pillar.get']('instances:' + instance + ':port') %}
    {% set prefix = salt['pillar.get']('instances:' + instance + ':prefix') %}
    # The value of 'prefix' includes a leading /
    location {{ prefix }}/ {
        gzip off;
        access_log {{ log_dir }}/{{ instance }}/nginx.access.log;
        error_log {{ log_dir }}/{{ instance }}/nginx.error.log;
        {% if 'http_auth' in pillar %}
        auth_basic "Restricted";
        auth_basic_user_file {{ auth_file }};
        {% endif %}
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Protocol ssl;
        proxy_set_header Host {{ pillar['domain'] }};
        proxy_redirect off;
        proxy_buffering on;
        proxy_intercept_errors on;

        # http://nginx.com/resources/admin-guide/reverse-proxy/
        proxy_pass http://127.0.0.1:{{ port }};
    }
  {% endfor %}

    location = / {
      # Show the instance list, on any instance - just use the first in the list
      {% set instance = salt['pillar.get']('instances').keys()[0] %}
      {% set prefix = salt['pillar.get']('instances:' + instance + ':prefix') %}
      return 301 "{{ prefix }}/instances/";
    }
}

{# redirect other server names to the real one (http://nginx.org/en/docs/http/converting_rewrite_rules.html under "A redirect to a main site") #}
server {
    listen 80 default_server;
    server_name _;
    return 301 https://{{ pillar['domain'] }}$request_uri;
}
